component NewParallelAssembly
    % NewParallelAssembly:2
    % Parallel Assembly Block
    %    Model resolution: Lumped
    %    Number of cells: 1
    %
    %    MATLAB version: 9.14
    %    Simscape Battery version: 1.1
    %    Simscape code generated on: 14-May-2023 23:38:29

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        V0_vecCell = {[3.5057, 3.566, 3.6337, 3.7127, 3.9259, 4.0777, 4.1928],'V'}; % Open-circuit voltage, V0(SOC)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_vecCell = {[.0085, .0085, .0087, .0082, .0083, .0085, .0085],'Ohm'}; % Terminal resistance, R0(SOC)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
    end

    parameters(ExternalAccess=none)
        P = 1; % Batteries in Parallel
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
    end

    variables
        iCell = {0,'A'}; % Cell current (positive in)
        vCell = {0,'V'}; % Cell terminal voltage
        socCell = {value={1,'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={0,'1'},priority=priority.high}; % Cell discharge cycles
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    intermediates
        power_dissipated = Cell1.power_dissipated*(P-1); % Power dissipated by P-1 cells
    end

    equations
        assert(length(iCell) == 1);
        assert(length(vCell) == 1);
        assert(length(socCell) == 1);
        assert(length(numCyclesCell) == 1);
        assert(length(vParallelAssembly) == 1);
        assert(length(socParallelAssembly) == 1);
        vParallelAssembly == vCell;
        socParallelAssembly == Cell1.stateOfCharge;
        Cell1.i == iCell;
        Cell1.v == vCell;
        Cell1.stateOfCharge == socCell;
        Cell1.num_cycles == numCyclesCell;
    end

    components(ExternalAccess=observe)
        Cell1 = batteryecm.table_battery(SOC_vec = SOC_vecCell,...
            V0_vec = V0_vecCell,V_range = V_rangeCell,R0_vec = R0_vecCell,AH = AHCell,...
            extrapolation_option = extrapolation_optionCell,...
            T_dependence = simscape.enum.tablebattery.temperature_dependence.no,...
            prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
            prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
            prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
            prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
            prm_dyn = simscape.enum.tablebattery.prm_dyn.off,...
            prm_fade = simscape.enum.tablebattery.prm_fade.disabled,...
            prm_leak = simscape.enum.tablebattery.prm_leak.disabled,thermal_port = simscape.enum.thermaleffects.omit,...
            i.priority = priority.none,v.priority = priority.none,...
            stateOfCharge.priority = priority.none,num_cycles.priority = priority.none);
    end

    components(Access=private)
        PositiveAdapter = BatteriesLumpingAdapters.ElectricalLumpingAdapter(CellsInParallel = P);
        NegativeAdapter = BatteriesLumpingAdapters.ElectricalLumpingAdapter(CellsInParallel = P);
    end

    connections
        connect(n,NegativeAdapter.LumpedNode);
        connect(NegativeAdapter.CellNode,Cell1.n);
        connect(p,PositiveAdapter.LumpedNode);
        connect(PositiveAdapter.CellNode,Cell1.p);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,V0_vecCell,V_rangeCell,R0_vecCell,AHCell,extrapolation_optionCell)];
        Icon = 'parallelAssembly.svg';
    end
end