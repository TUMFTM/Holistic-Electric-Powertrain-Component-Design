component ParallelAssemblyType1
    % ParallelAssemblyType1:2
    % Parallel Assembly Block
    %    Model resolution: Detailed
    %    Number of cells: 3
    %
    %    MATLAB version: 9.13
    %    Simscape Battery version: 1.0
    %    Simscape code generated on: 10-Mar-2023 14:38:30

    parameters
        SOC_vec = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vec = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_mat = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_range = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_mat = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AH = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_option = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_mass = {100,'J/K'}; % Thermal mass
        CellBalancingClosedResistance = {0.01,'Ohm'}; % Cell balancing switch closed resistance
        CellBalancingOpenConductance = {1e-8,'1/Ohm'}; % Cell balancing switch open conductance
        CellBalancingThreshold = {0.5,'1'}; % Cell balancing switch operation threshold
        CellBalancingResistance = {50,'Ohm'}; % Cell balancing shunt resistance
        CoolantResistance = {1.2,'K/W'}; % Cell level coolant thermal path resistance
        AmbientResistance = {25,'K/W'}; % Cell level ambient thermal path resistance
    end

    parameters(Access=private)
        CoolantResistanceScaled = CoolantResistance .* ones(1,P); % Scaled cell level coolant thermal path resistance
        AmbientResistanceScaled = AmbientResistance .* ones(1,P); % Scaled cell level ambient thermal path resistance
    end

    parameters(ExternalAccess=none)
        P = 3; % Batteries in Parallel
    end

    inputs
        enableCellBalancing = {0,'1'}; % CB
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        ClntH = foundation.thermal.thermal; % CH
        AmbH = foundation.thermal.thermal; % AH
    end

    variables
        iCellModel = {repmat(0,3,1),'A'}; % Cell model current (positive in)
        vCellModel = {repmat(0,3,1),'V'}; % Cell model terminal voltage
        socCellModel = {value={repmat(1,3,1),'1'},priority=priority.high}; % Cell model state of charge
        numCyclesCellModel = {value={repmat(0,3,1),'1'},priority=priority.high}; % Cell model discharge cycles
        temperatureCellModel = {value={repmat(298.15,3,1),'K'},priority=priority.high}; % Cell model temperature
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCellModel) == P);
        assert(length(vCellModel) == P);
        assert(length(socCellModel) == P);
        assert(length(numCyclesCellModel) == P);
        assert(length(temperatureCellModel) == P);
        assert(length(vParallelAssembly) == 1);
        assert(length(socParallelAssembly) == 1);
        assert(isequal(size(CoolantResistance),[1,1]) || isequal(size(CoolantResistance),[1,P]),...
            'Cell level coolant thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of cells modeled by the block');
        assert(isequal(size(AmbientResistance),[1,1]) || isequal(size(AmbientResistance),[1,P]),...
            'Cell level ambient thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of cells modeled by the block');
        vParallelAssembly == vCellModel(1);
        socParallelAssembly == sum(socCellModel)/P;
    end

    components(ExternalAccess=observe)
        balancingSwitch = foundation.electrical.elements.controlled_switch(R_closed = CellBalancingClosedResistance,...
            G_open = CellBalancingOpenConductance,Threshold = CellBalancingThreshold);
        balancingResistor = foundation.electrical.elements.resistor(R = CellBalancingResistance);
    end

    connections
        connect(Cell.p,balancingSwitch.p);
        connect(balancingSwitch.n,balancingResistor.p);
        connect(balancingResistor.n,Cell.n);
        connect(enableCellBalancing,balancingSwitch.vT);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vec,T_vec,V0_mat,V_range,R0_mat,AH,extrapolation_option),...
            UIGroup("Thermal",thermal_mass,CoolantResistance,AmbientResistance),...
            UIGroup("Cell Balancing",CellBalancingClosedResistance,CellBalancingOpenConductance,CellBalancingThreshold,CellBalancingResistance)];
        Icon = 'parallelAssembly.svg';
    end

    for Pidx = 1:P
        components(ExternalAccess=observe,CompileReuse=true)
            Cell(Pidx) = batteryecm.table_battery(SOC_vec = SOC_vec,T_vec = T_vec,...
                V0_mat = V0_mat,V_range = V_range,R0_mat = R0_mat,AH = AH,...
                extrapolation_option = extrapolation_option,thermal_mass = thermal_mass,...
                T_dependence = simscape.enum.tablebattery.temperature_dependence.yes,...
                thermal_port = simscape.enum.thermaleffects.model,...
                prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
                prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
                prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
                prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,prm_dyn = simscape.enum.tablebattery.prm_dyn.off,...
                prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
                prm_fade = simscape.enum.tablebattery.prm_fade.disabled,...
                prm_leak = simscape.enum.tablebattery.prm_leak.disabled,i.priority = priority.none,v.priority = priority.none,...
                stateOfCharge.priority = priority.none,...
                num_cycles.priority = priority.none,cell_temperature.priority = priority.none);
        end
    end

    for Pidx = 1:P
        connections
            connect(p,Cell(Pidx).p);
            connect(Cell(Pidx).n,n);
        end
    end

    for Pidx = 1:P
        equations
            Cell(Pidx).i == iCellModel(Pidx);
            Cell(Pidx).v == vCellModel(Pidx);
            Cell(Pidx).stateOfCharge == socCellModel(Pidx);
            Cell(Pidx).num_cycles == numCyclesCellModel(Pidx);
            Cell(Pidx).cell_temperature == temperatureCellModel(Pidx);
        end
    end

    for Pidx = 1:P
        components(ExternalAccess=observe)
            CoolantResistor(Pidx) = foundation.thermal.elements.resistance(resistance = CoolantResistanceScaled(Pidx));
        end

        connections
            connect(Cell(Pidx).H,CoolantResistor(Pidx).A);
            connect(CoolantResistor(Pidx).B,ClntH);
        end
    end

    for Pidx = 1:P
        components(ExternalAccess=observe)
            AmbientResistor(Pidx) = foundation.thermal.elements.resistance(resistance = AmbientResistanceScaled(Pidx));
        end

        connections
            connect(Cell(Pidx).H,AmbientResistor(Pidx).A);
            connect(AmbientResistor(Pidx).B,AmbH);
        end
    end
end